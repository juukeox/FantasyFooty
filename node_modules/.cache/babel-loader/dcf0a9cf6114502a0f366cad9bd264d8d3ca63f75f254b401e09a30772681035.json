{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Work\\\\OneDrive\\\\Documents\\\\GitHub\\\\FantasyFooty\\\\src\\\\Results.js\",\n  _s = $RefreshSig$();\n// results\nimport 'antd/dist/antd.js';\nimport './Results.css';\nimport React from 'react';\nimport { Table } from 'antd';\nimport teams from './styles.js';\nimport jsonData from './final_scores.json'; // Import the JSON data\n\n// Additional import statements as per your project's requirements\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Results = () => {\n  _s();\n  const [data, setData] = React.useState([]);\n  React.useEffect(() => {\n    const formattedData = Object.entries(jsonData).map((_ref, index) => {\n      let [name, item] = _ref;\n      return {\n        ...item,\n        key: index,\n        Name: name\n      };\n    });\n    const sortedData = formattedData.sort((a, b) => b.Score - a.Score); // Sort data by \"Score\" in descending order\n\n    setData(sortedData);\n  }, []);\n  const displayedColumns = ['Name', 'Team', 'Position', 'Price', 'Score'];\n  const columns = displayedColumns.map(column => {\n    if (column === 'Name') {\n      return {\n        title: column,\n        dataIndex: column,\n        key: column,\n        render: (text, record) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontWeight: 'bold'\n          },\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }, this)\n      };\n    }\n    if (column === 'Team') {\n      return {\n        title: column,\n        dataIndex: column,\n        key: column,\n        render: (text, record) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            alignItems: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              backgroundColor: teams[text].background,\n              // Access background color from teams object\n              color: teams[text].text,\n              // Access text color from teams object\n              padding: '4px 8px',\n              borderRadius: '4px'\n            },\n            children: text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      };\n    }\n    if (column === 'Score') {\n      return {\n        title: column,\n        dataIndex: column,\n        key: column,\n        render: (text, record) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            width: '100%',\n            height: '100%',\n            display: 'flex',\n            alignItems: 'center',\n            justifyContent: 'center'\n          },\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            style: {\n              backgroundColor: calculateBackgroundColor(text),\n              border: '1px solid black',\n              display: 'inline-block',\n              padding: '2px',\n              textAlign: 'center',\n              width: '100px'\n            },\n            children: text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this)\n      };\n    }\n    return {\n      title: column,\n      dataIndex: column,\n      key: column,\n      render: (text, record) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '100%',\n          height: '100%',\n          display: 'flex',\n          alignItems: 'center',\n          justifyContent: 'center'\n        },\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            backgroundColor: '',\n            border: 'none',\n            display: 'inline-block',\n            padding: '2px',\n            textAlign: 'center',\n            width: '100px'\n          },\n          children: text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    };\n  });\n  const calculateBackgroundColor = value => {\n    const normalizedValue = (value - 0) / (100 - 0);\n    const red = Math.min(0.5, 1 - (normalizedValue - 0.35) / 0.65) * 2 * 255;\n    const green = Math.min(0.5, normalizedValue) * 2 * 255;\n    const blue = 0;\n    return `rgb(${red}, ${green}, ${blue})`;\n  };\n  return /*#__PURE__*/_jsxDEV(Table, {\n    dataSource: data,\n    columns: columns,\n    bordered: true // Add bordered prop to enable borders around the table cells\n    ,\n    rowClassName: () => 'vertical-line-row' // Add custom CSS class to rows for vertical line pattern\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(Results, \"IEMTtLVFIuToo7X/raQbJAxzNQU=\");\n_c = Results;\nexport default Results;\nvar _c;\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"names":["React","Table","teams","jsonData","jsxDEV","_jsxDEV","Results","_s","data","setData","useState","useEffect","formattedData","Object","entries","map","_ref","index","name","item","key","Name","sortedData","sort","a","b","Score","displayedColumns","columns","column","title","dataIndex","render","text","record","style","fontWeight","children","fileName","_jsxFileName","lineNumber","columnNumber","display","alignItems","backgroundColor","background","color","padding","borderRadius","width","height","justifyContent","calculateBackgroundColor","border","textAlign","value","normalizedValue","red","Math","min","green","blue","dataSource","bordered","rowClassName","_c","$RefreshReg$"],"sources":["C:/Users/Work/OneDrive/Documents/GitHub/FantasyFooty/src/Results.js"],"sourcesContent":["// results\r\nimport 'antd/dist/antd.js'; \r\nimport './Results.css'; \r\nimport React from 'react';\r\nimport { Table } from 'antd';\r\nimport teams from './styles.js'; \r\nimport jsonData from './final_scores.json'; // Import the JSON data\r\n\r\n// Additional import statements as per your project's requirements\r\n\r\nconst Results = () => {\r\n  const [data, setData] = React.useState([]);\r\n\r\n  React.useEffect(() => {\r\n    const formattedData = Object.entries(jsonData).map(([name, item], index) => ({\r\n      ...item,\r\n      key: index,\r\n      Name: name,\r\n    }));\r\n\r\n    const sortedData = formattedData.sort((a, b) => b.Score - a.Score); // Sort data by \"Score\" in descending order\r\n\r\n    setData(sortedData);\r\n  }, []);\r\n\r\n  const displayedColumns = ['Name', 'Team', 'Position', 'Price', 'Score'];\r\n\r\n  const columns = displayedColumns.map((column) => {\r\n    if (column === 'Name') {\r\n      return {\r\n        title: column,\r\n        dataIndex: column,\r\n        key: column,\r\n        render: (text, record) => (\r\n          <div\r\n            style={{\r\n              fontWeight: 'bold',\r\n            }}\r\n          >\r\n            {text}\r\n          </div>\r\n        ),\r\n      };\r\n    }\r\n\r\n    if (column === 'Team') {\r\n      return {\r\n        title: column,\r\n        dataIndex: column,\r\n        key: column,\r\n        render: (text, record) => (\r\n          <div\r\n            style={{\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n            }}\r\n          >\r\n            <span\r\n              style={{\r\n                backgroundColor: teams[text].background, // Access background color from teams object\r\n                color: teams[text].text, // Access text color from teams object\r\n                padding: '4px 8px',\r\n                borderRadius: '4px',\r\n              }}\r\n            >\r\n              {text}\r\n            </span>\r\n          </div>\r\n        ),\r\n      };\r\n    }\r\n\r\n    if (column === 'Score') {\r\n      return {\r\n        title: column,\r\n        dataIndex: column,\r\n        key: column,\r\n        render: (text, record) => (\r\n          <div\r\n            style={{\r\n              width: '100%',\r\n              height: '100%',\r\n              display: 'flex',\r\n              alignItems: 'center',\r\n              justifyContent: 'center',\r\n            }}\r\n          >\r\n            <span\r\n              style={{\r\n                backgroundColor: calculateBackgroundColor(text),\r\n                border: '1px solid black',\r\n                display: 'inline-block',\r\n                padding: '2px',\r\n                textAlign: 'center',\r\n                width: '100px',\r\n              }}\r\n            >\r\n              {text}\r\n            </span>\r\n          </div>\r\n        ),\r\n      };\r\n    }\r\n\r\n    return {\r\n      title: column,\r\n      dataIndex: column,\r\n      key: column,\r\n      render: (text, record) => (\r\n        <div\r\n          style={{\r\n            width: '100%',\r\n            height: '100%',\r\n            display: 'flex',\r\n            alignItems: 'center',\r\n            justifyContent: 'center',\r\n          }}\r\n        >\r\n          <span\r\n            style={{\r\n              backgroundColor: '',\r\n              border: 'none',\r\n              display: 'inline-block',\r\n              padding: '2px',\r\n              textAlign: 'center',\r\n              width: '100px',\r\n            }}\r\n          >\r\n            {text}\r\n          </span>\r\n        </div>\r\n      ),\r\n    };\r\n  });\r\n\r\n  const calculateBackgroundColor = (value) => {\r\n    const normalizedValue = (value - 0) / (100 - 0);\r\n\r\n    const red = Math.min(0.5, (1 - (normalizedValue - 0.35) / 0.65)) * 2 * 255;\r\n    const green = Math.min(0.5, normalizedValue) * 2 * 255;\r\n    const blue = 0;\r\n\r\n    return `rgb(${red}, ${green}, ${blue})`;\r\n  };\r\n\r\n  return (\r\n    <Table\r\n      dataSource={data}\r\n      columns={columns}\r\n      bordered // Add bordered prop to enable borders around the table cells\r\n      rowClassName={() => 'vertical-line-row'} // Add custom CSS class to rows for vertical line pattern\r\n    />\r\n  );\r\n};\r\n\r\nexport default Results;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}